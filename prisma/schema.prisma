// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// User Section
model User {
  id           String      @id @default(uuid())
  username     String
  password     String
  imageProfile String?
  birthdayDate DateTime?
  createdAt    DateTime    @default(now())
  UserWallet   UserWallet?
  Post         Post[]
  Likes        Likes[]
  Comment      Comment[]
  Music        Music[]

  @@map("users")
}

model UserWallet {
  id       String @id @default(uuid())
  userId   String @unique()
  walletId String
  coins    Int    @default(0)

  userRelation User @relation(fields: [userId], references: [id])

  @@map("user_wallets")
}

// Post Section
model Post {
  id          String    @id @default(uuid())
  userId      String
  musicId     String?   @unique
  contentPath String?
  caption     String
  createdAt   DateTime  @default(now())
  Likes       Likes[]
  Comment     Comment[]

  userRelation  User   @relation(fields: [userId], references: [id])
  musicRelation Music? @relation(fields: [musicId], references: [id])

  @@map("posts")
}

model Likes {
  id     String @id @default(uuid())
  userId String
  postId String

  postRelation Post @relation(fields: [postId], references: [id])
  userRelation User @relation(fields: [userId], references: [id])

  @@map("likes")
}

model Comment {
  id        String   @id @default(uuid())
  userId    String
  postId    String
  content   String
  createdAt DateTime @default(now())

  postRelation Post @relation(fields: [postId], references: [id])
  userRelation User @relation(fields: [userId], references: [id])

  @@map("comments")
}

// Music Section
model Music {
  id           String   @id @default(uuid())
  externalId   String   @unique
  userId       String
  state        String
  title        String?
  tags         String?
  imageUrl     String?
  audioUrl     String?
  videoUrl     String?
  mv           String?
  duration     String?
  propmt       String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  post Post?
  user User  @relation(fields: [userId], references: [id])

  @@map("musics")
}
